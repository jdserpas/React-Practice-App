{"version":3,"sources":["App.js","index.js"],"names":["API","Match","props","info","status","id","class","homeTeam","name","score","fullTime","awayTeam","Results","state","currentMatchDay","matchDay","isLoaded","matches","changeMatchDay","bind","e","this","setState","target","selectedIndex","callMatches","comp","compId","md","fetch","then","resp","json","data","prevProps","prevState","arr","i","onChange","map","length","selected","React","Component","Team","className","position","team","playedGames","won","lost","goalDifference","points","Table","prevCompId","standings","st","table","cellSpacing","App","setLeague","selectedComp","error","comps","newComps","competitions","filter","message","console","log","item","area","currentSeason","currentMatchday","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3d843445.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n//import { ReactComponent } from '*.svg';\n\nconst API = {\n  url: \"https://api.football-data.org/v2/\",\n  token: \"4f80031c8e09431dbc3846f5480fb600\" \n  \n}\n\nfunction Match(props) {\n  const {info} = props;\n  if(info.status === \"FINISHED\") {\n    return(\n      <table id = \"match\">\n        <tr id=\"ScoreInfo\">\n          <td class=\"HomeOrAway\">H</td>\n          <td class=\"Team\">{info.homeTeam.name}</td>\n          <td class=\"Score\">{info.score.fullTime.homeTeam}</td>\n          <td class=\"HomeOrAway\">VS</td>\n          <td class=\"Score\">{info.score.fullTime.awayTeam}</td>\n          <td class=\"Team\">{info.awayTeam.name}</td>\n          <td class=\"HomeOrAway\">A</td>\n        </tr>\n        <tr id=\"time\">FINAL SCORE</tr>\n      </table>\n    );\n  }\n  else {\n    return(\n      <table id = \"match\">\n        <tr id=\"ScoreInfo\">\n          <td class=\"HomeOrAway\">H</td>\n          <td class=\"Team\">{info.homeTeam.name}</td>\n          <td class=\"Score\">{info.score.fullTime.homeTeam}</td>\n          <td class=\"HomeOrAway\">VS</td>\n          <td class=\"Score\">{info.score.fullTime.awayTeam}</td>\n          <td class=\"Team\">{info.awayTeam.name}</td>\n          <td class=\"HomeOrAway\">A</td>\n        </tr>\n        <tr id=\"time\">{info.status}</tr>\n      </table>\n    );\n  }\n}\n\nclass Results extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      currentMatchDay: [],\n      matchDay: props.matchDay,\n      isLoaded: false,\n      matches: []\n    }\n    this.changeMatchDay = this.changeMatchDay.bind(this);\n  };\n\n  changeMatchDay(e){\n    //get selected index\n    this.setState({\n      matchDay: e.target.selectedIndex,\n    })\n    this.callMatches(this.props.comp, this.state.matchDay);\n  }\n  \n  //used to call the API\n  callMatches(compId, md) {\n    fetch(API.url + \"competitions/\" + compId + \"/matches?matchday=\" + md, {\n      \"method\" : \"GET\",\n      \"headers\" : {\n        \"X-Auth-Token\" : API.token,\n      }\n    })\n    .then( resp => {\n      return resp.json();\n    })\n    .then( data =>{\n      this.setState({\n        isLoaded: true,\n        matches: data.matches\n      });\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if(!this.props.comp){\n      return;\n    } \n    else {\n      if(this.props.comp !== prevProps.comp){\n        this.callMatches(this.props.comp, this.state.matchDay);\n        let arr = [];\n        for(let i = 0; i < this.props.matchDay; i++){\n          arr[i]= i + 1;\n        }\n        this.state.currentMatchDay = arr;\n      }\n    }\n  }\n\n  render() {\n    const {isLoaded, matches,currentMatchDay} = this.state;\n\n    if(!isLoaded) {\n      return(\n        <div>\n          Please Pick a League.\n        </div>\n      )\n    } \n    else{\n      return (\n        <div id=\"matchContainer\">\n          <select id=\"MatchDay\" onChange={this.changeMatchDay}>\n            {currentMatchDay.map((e, i)=>{\n              if(currentMatchDay.length === i +1) {\n                return <option selected key={e}>{e}</option>  \n              }\n              else{\n                return <option key={e}>{e}</option>\n              }\n            })}\n          </select>\n        {matches.map( e => {\n            return(\n              <div key = {e.id} class=\"matchDisplay\">\n                <Match info = {e}></Match>\n              </div>\n            )\n        })}\n        </div>\n      )\n    }  \n  }\n}\n\nfunction Team(props) {\n  const {info} = props;\n  return (\n  <tr id=\"team\">\n    <td className=\"tableData Pos\">\n        {info.position}\n    </td>\n    <td className=\"tableData TeamName\">\n        {info.team.name}\n    </td>\n    <td className=\"tableData GP\">\n        {info.playedGames}\n    </td>\n    <td className=\"tableData Won\">\n        {info.won}\n    </td>\n    <td className=\"tableData Loss\">\n        {info.lost}\n    </td>\n    <td className=\"tableData GD\">\n        {info.goalDifference}\n    </td>\n    <td className=\"tableData Points\" id=\"points\">\n        {info.points}\n    </td>\n  </tr> \n  )\n}\n\nclass Table extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoaded: false,\n      prevCompId: -1,\n      compId: 0,\n      standings: null,\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    //if no competition has been passed\n    if(this.props.comp === 0) {\n      return;\n    }\n    else {\n      //this to prevent never ending\n      if(this.props.comp !== prevProps.comp) {\n        fetch(API.url + \"competitions/\" + this.props.comp + \"/standings\", {\n          \"method\" : \"GET\",\n          \"headers\" : {\n            \"X-Auth-Token\" : API.token,\n          }\n        })\n        .then(resp => {\n          return resp.json();\n        })\n        .then(data => {\n          //extract the table data from the json\n          let st = data.standings[0].table;\n          this.setState({\n            prevCompId: this.state.compId,\n            compId: data.id,\n            isLoaded: true,\n            standings: st,\n          })\n        })\n      }\n    }\n  }\n\n  render() {\n    if (!this.state.isLoaded) {\n      return (\n        <div>Please Pick a League</div>\n      )\n    }\n    else {\n      //console.log(this.state.standings);\n      return (\n      <table id=\"TableStand\" cellSpacing=\"0\">\n        <tr id=\"StandHeaders\">\n          <th class=\"Pos\">Pos.</th>\n          <th class=\"TeamName\">Team</th>\n          <th class=\"GP\">GP</th>\n          <th class=\"Won\">W</th>\n          <th class=\"Loss\">L</th>\n          <th class=\"GD\">GD</th>\n          <th class=\"Points\">P</th>\n        </tr>\n        {this.state.standings.map(i =>{\n          return(\n            <Team key= {i.position} info={i}></Team>\n          )\n        })}\n      </table>\n      )\n    }\n  };\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      comps: [],\n      selectedComp: 0\n    }\n  }\n  \n  //Used for changing state of selected league\n  setLeague = e =>{\n    this.setState({\n      //Returns the index of the drop down menu that\n      //has been selected. This index will be used to\n      //query the array to get the league.\n      selectedComp: e.target.selectedIndex,\n    })\n\n  };\n  \n  componentDidMount() {\n    //Make the GET call.\n    fetch(API.url + \"competitions/\", {\n      \"method\" : \"GET\",\n      \"headers\" : {\n        \"X-Auth-Token\" : API.token,\n      }\n    })\n    //Convert the response into json.\n    .then(resp => {\n      return resp.json();\n    })\n    //Pass the json data into Component's state.\n    .then(data => {\n      //We must create a new array that only contains \n      //the competitions that a free acount can access.\n      let newComps = data.competitions.filter(i => {\n        //We will use a switch that retrieves the id prop of each element\n        //then it will compare that id to the listed cases which are the\n        //only available league ids for a free account.\n        //also removes cups\n        switch(i.id) {\n          case 2002:\n          case 2003:\n          case 2013:\n          case 2014:\n          case 2015:\n          case 2016:\n          case 2017:\n          case 2019:\n          case 2021:\n            return true;\n            break;\n          default:\n            return false;\n        }\n      })\n      this.setState({\n        //let the state know that we have completed the API fetch request\n        isLoaded: true,\n        //pass the filtered array to the state\n        comps: newComps\n      })\n      \n    })\n  }\n\n  render() {\n    //load state into render method\n    const {error, isLoaded, comps, selectedComp} = this.state;\n    //if error occurs notify the user\n    if(error) {\n    return <div>Error: {error.message}</div>\n    }\n    //display this while the API request hasn't been made\n    else if (!isLoaded) {\n      return <div>Loading...</div>\n    }\n    //actual content to be rendered once API is retrieved\n    else {\n      \n    console.log(comps[selectedComp].id);\n    return(\n    <div id=\"container\">\n      <div id=\"compSelect\">\n        <select id=\"compList\" onChange={this.setLeague}>\n          {comps.map(item =>(\n            <option key={item.id} id={item.id}>\n              {item.area.name} : {item.name}\n            </option>\n          ))}\n        </select>\n      </div>\n      <div id=\"standings\">\n        <Table comp = {comps[selectedComp].id}></Table>\n      </div>\n      <div id=\"results\">\n        <Results comp = {comps[selectedComp].id} matchDay = {comps[selectedComp].currentSeason.currentMatchday}></Results>\n      </div>\n    </div>\n    );\n   }\n  };\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}